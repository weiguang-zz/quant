###采用restful的架构设计

##端点:
    一个端点就是指向特定资源或资源集合的URL或着一个服务或一类服务。

    如果你正在构建一个虚构的API来展现几个不同的动物园，每一个动物园又包含很多动物，员工和每个动物的物种，你可能会有如下的端点信息：

    https://api.example.com/v1/zoos
    https://api.example.com/v1/animals
    https://api.example.com/v1/animal_types
    https://api.example.com/v1/employees
    针对每一个端点来说，你可能想列出所有可行的HTTP动词和端点的组合。如下所示，请注意我把HTTP动词都放在了虚构的API之前，正如将同样的注解放在每一个HTTP请求头里一样。（下面的URL就不翻译了，我觉得没啥必要翻^_^）

    GET /zoos: List all Zoos (ID and Name, not too much detail)
    POST /zoos: Create a new Zoo
    GET /zoos/ZID: Retrieve an entire Zoo object
    PUT /zoos/ZID: Update a Zoo (entire object)
    PATCH /zoos/ZID: Update a Zoo (partial object)
    DELETE /zoos/ZID: Delete a Zoo
    GET /zoos/ZID/animals: Retrieve a listing of Animals (ID and Name).
    GET /animals: List all Animals (ID and Name).
    POST /animals: Create a new Animal
    GET /animals/AID: Retrieve an Animal object
    PUT /animals/AID: Update an Animal (entire object)
    PATCH /animals/AID: Update an Animal (partial object)
    GET /animal_types: Retrieve a listing (ID and Name) of all Animal Types
    GET /animal_types/ATID: Retrieve an entire Animal Type object
    GET /employees: Retrieve an entire list of Employees
    GET /employees/EID: Retreive a specific Employee
    GET /zoos/ZID/employees: Retrieve a listing of Employees (ID and Name) who work at this Zoo
    POST /employees: Create a new Employee
    POST /zoos/ZID/employees: Hire an Employee at a specific Zoo
    DELETE /zoos/ZID/employees/EID: Fire an Employee from a specific Zoo
    在上面的列表里，ZID表示动物园的ID， AID表示动物的ID，EID表示雇员的ID，还有ATID表示物种的ID。让文档里所有的东西都有一个关键字是一个好主意。

    为了简洁起见，我已经省略了所有API共有的URL前缀。作为沟通方式这没什么问题，但是如果你真要写到API文档中，那就必须包含完整的路径（如，GET http://api.example.com/v1/animal_type/ATID）。

    请注意如何展示数据之间的关系，特别是雇员与动物园之间的多对多关系。通过添加一个额外的URL段就可以实现更多的交互能力。当然没有一个HTTP动词能表示正在解雇一个人，但是你可以使用DELETE一个动物园里的雇员来达到相同的效果。
##过滤器
    ?limit=10: 减少返回给客户端的结果数量（用于分页）
    ?offset=10: 发送一堆信息给客户端（用于分页）
    ?animal_type_id=1: 使用条件匹配来过滤记录
    ?sortby=name&order=asc:  对结果按特定属性进行排序

    有些过滤器可能会与端点URL的效果重复。例如我之前提到的GET /zoo/ZID/animals。它也同样可以通过GET /animals?zoo_id=ZID来实现。
    独立的端点会让客户端更好过一些，因为他们的需求往往超出你的预期(因为独立的端点可以支持http动词的各种操作,过滤器仅仅针对查询)。本文中提到这种冗余差异可能对第三方开发者并不可见。

    无论怎么说，当你准备过滤或排序数据时，你必须明确的将那些客户端可以过滤或排序的列放到白名单中，因为我们不想将任何的数据库错误发送给客户端。